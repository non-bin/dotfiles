#!/usr/bin/env bash
# set -x # Print commands as they are printed
set -e # Exit on any errors

cd -- "$( dirname -- "${BASH_SOURCE[0]}" )/../"

REBUILD="YES" # Default

POSITIONAL_ARGS=()
while [[ $# -gt 0 ]]; do
  case $1 in
    -R|--rescue)
      RESCUE="YES"
      shift # past argument
      ;;
    -o|--optimise)
      REBUILD="NO"
      OPTIMISE="YES"
      shift
      ;;
    -p|--pull)
      PULL="YES"
      shift # past argument
      ;;
    -P|--push)
      PUSH="YES"
      shift # past argument
      ;;
    -u|--upgrade)
      UPGRADE="YES"
      shift # past argument
      ;;
    -t|--trace)
      TRACE="--show-trace"
      shift # past argument
      ;;
    -c|--clean)
      REBUILD="NO"
      CLEAN="YES"
      shift # past argument
      ;;
    -r|--rebuild)
      REBUILD="YES"
      shift # past argument
      ;;
    -d|--dry-run)
      DRY="YES"
      shift # past argument
      ;;
    -g|--generation)
      GENERATION="YES"
      REBUILD="NO"
      shift
      ;;
    -*|--*)
      echo "Unknown option $1"

      echo "Usage: reload [options] [new-config-name]"
      echo
      echo "Options:"
      echo "  -u, --upgrade     Pull updates from upstream and update lockfile"
      echo "  -c, --clean       Garbage collect the nix store, don't rebuild (more info at https://nixos.wiki/wiki/Cleaning_the_nix_store and https://nixos.wiki/wiki/Storage_optimization)"
      echo "  -o, --optimise    Hard link identicle files in the nix store, don't rebuild"
      echo "  -p, --pull        Pull updates from git before updating"
      echo "  -P, --push        Commit and push all changes"
      echo "  -r, --rebuild     Explicitly run the rebuild command (eg if running with -c or -o)"
      echo "  -d, --dry-run     Run everything but the rebuild command"
      echo "  -R, --rescue      Don't run any extra commands (like git)"
      echo "  -t, --trace       Pass --show-trace to rebuild command (for debuggin)"
      echo
      echo "Options must be specified with separate tacs (these: '-'). For example use '-u -c -P' not '-ucP"
      exit 1
      ;;
    *)
      POSITIONAL_ARGS+=("$1") # save positional arg
      shift # past argument
      ;;
  esac
done

set -- "${POSITIONAL_ARGS[@]}" # restore positional parameters

NEW_CONFIG_NAME="$1"

if [ "$CLEAN" == "YES" ]; then
  [ "$NIX_HOMEMAN_STANDALONE_TYPE" == "" ] && sudo nix-collect-garbage --delete-older-than 30d # Delete old system generations
  nix-collect-garbage --delete-older-than 30d # And the same for HomeManager
  nix-store --gc # Remove unused store entries
fi

if [ "$OPTIMISE" == "YES" ]; then
  nix-store --optimise -vv # Can be scheduled with `nix.optimise.automatic = true;`, or run on every build with `nix.settings.auto-optimise-store = true;`, but this doesn't catch everything
fi

if [ "$PULL" == "YES" ]; then
  git pull
fi

if [ "$PUSH" == "YES" ]; then
  git add *
  git commit
  git push
fi

if [ "$UPGRADE" == "YES" ]; then
  nix flake update
  echo "Finished update"
  echo
fi

if [ "$RESCUE" != "YES" ] && [ "$REBUILD" == "YES" ]; then
  UNTRACKED_FILES=$(git ls-files -o --exclude-standard)
  if [ -n "$UNTRACKED_FILES" ]; then
    git add "$UNTRACKED_FILES" # Add all untracked files
  fi
fi

if [ "$GENERATION" == "YES" ]; then
  bash $(home-manager generations | fzf | awk -F '-> ' '{print $2 "/activate"}')
fi

# rm /home/alice/.config/mimeapps.list # Gets overwritten by setting defaults in Thunar
if [ "$DRY" != "YES" ] && [ "$REBUILD" == "YES" ]; then
  if [ "$NIX_HOMEMAN_STANDALONE_TYPE" == "" ]; then
    nixos-rebuild switch --sudo $TRACE --flake ./#$NEW_CONFIG_NAME
  else
    [ "$NEW_CONFIG_NAME" == "" ] && NEW_CONFIG_NAME=$NIX_HOMEMAN_STANDALONE_TYPE
    home-manager switch -b bak $TRACE --flake ./#$NEW_CONFIG_NAME
  fi
fi
